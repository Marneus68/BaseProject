#!/bin/bash

# Name and version
progname="BaseProject"
exname="bp"
version="0.1"
creator="Duane Bekaert"

# Default value
configfile=$(eval echo ~)"/.bprc"
service="github"
username="base_project"
orgname=""
trigger="base_"

update=0
default=0
login=0

### API queries
# github
gh_usercheck='curl -s https://api.github.com/users/%USERNAME% | grep "Not Found"'
gh_usercheck_login='curl -s --user %USERNAME% https://api.github.com/users/%USERNAME% | grep "Not Found"'

gh_bpindex='curl -s https://api.github.com/users/%USERNAME%/repos'
gh_bpindex_login='curl -s --user %USERNAME% https://api.github.com/users/%USERNAME%/repos'

#gh_indexcleaner=grep -e '"name": "' | sed -e 's/ *"name" *: *"//g' | sed -e 's/\\"/"/g' | sed -e 's/",$/ /g' | sed -e 's/^ *$/No description./g'
gh_indexcleaner=' | grep -e '\''"%QUERRY%": "'\'' | sed -e '\''s/ *"%QUERRY%" *: *"//g'\'' | sed -e '\''s/\\"/"/g'\'' | sed -e '\''s/",$/ /g'\'' | sed -e '\''s/^ *$/No description./g'\'''

# Colors
green=$(eval tput setaf 2);
black=$(eval tput setaf 0);
red=$(eval tput setaf 1);
green=$(eval tput setaf 2);
yellow=$(eval tput setaf 3);
blue=$(eval tput setaf 4);
magenta=$(eval tput setaf 5);
cyan=$(eval tput setaf 2);
white=$(eval tput setaf 7);
reset=$(eval tput sgr0);

askYn() {
    valid=false;
    while [ "$valid" = false ]; do
        printf "["$green"?"$reset"] ""$1"" (Y/n) ";
        read -r LINE || [[ -n $LINE ]];
        input=$(echo "$LINE" | tr '[:upper:]' '[:lower:]');
        case "$input" in
            y|yes|"")
                control=true;
                valid=true;
                ;;
            n|no)
                control=false;
                valid=true;
                ;;
            *)
                echo $red"Invalid input!"$reset;
                ;;
        esac
    done
}

askyN() {
    valid=false;
    while [ "$valid" = false ]; do
        printf "["$green"?"$reset"] ""$1"" (y/N) ";
        read -r LINE || [[ -n $LINE ]];
        input=$(echo "$LINE" | tr '[:upper:]' '[:lower:]');
        case "$input" in
            n|no|"")
                control=false;
                valid=true;
                ;;
            y|yes)
                control=true;
                valid=true;
                ;;
            *)
                echo $red"Invalid input!"$reset;
                ;;
        esac
    done
}

selectService() {
    echo "["$yellow">"$reset"] Select the service you use to host your base projects (default: github):"
}

inputUsername() {
    valid=false;
    while [ "$valid" = false ]; do
        printf "["$magenta"a"$reset"] Input your user name (default: ""$username""): "
        read -r LINE || [[ -n $LINE ]];
        if [ "$LINE" != "" ]; then
            case $LINE in  
                *\ * )
                    echo $red"Invalid input!"$reset;
                    ;;
                *)
                    valid=true;
                    username=$LINE;
                    ;;
            esac
        else
            valid=true;
        fi
    done
}

inputBaseProjectTrigger() {
    valid=false;
    while [ "$valid" = false ]; do
        printf "["$magenta"a"$reset"] Input your base project trigger (default: ""$trigger""): "
        read -r LINE || [[ -n $LINE ]];
        if [ "$LINE" != "" ]; then
            case $LINE in  
                *\ * )
                    echo $red"Invalid input!"$reset;
                    ;;
                *)
                    valid=true;
                    trigger=$LINE;
                    ;;
            esac
        else
            valid=true;
        fi
    done
}

checkConfig() {
    case $service in
        github )
            printf "Checking the user name ("$username") against the github API… "
            eval tput sc
            if [ $login = 0 ]; then
                querry=${gh_usercheck//%USERNAME%/$username}
                temp=$(eval $querry)
            elif [ $login = 1 ]; then
                printf "\n"
                querry=${gh_usercheck_login//%USERNAME%/$username}
                temp=$(eval $querry)
                eval tput rc
            fi
            if [ "$temp" = "" ]; then
                printf "["$green"ok"$reset"]\n"
                control=false;
            else
                printf "["$red"err"$reset"]\n"
                control=true;
            fi
            ;;
    esac
}

writeConfig() {
    rm -rf "$configfile"
    touch "$configfile"
    echo "$service" >> $configfile
    echo "$username" >> $configfile
    echo "$trigger" >> $configfile
}

readConfig() {
    if [ -f $configfile ]; then
        printf "Reading configuration from file ("$configfile")… "

        local_service=$(sed -n 1p $configfile)
        local_username=$(sed -n 2p $configfile)
        local_trigger=$(sed -n 3p $configfile)
        if [[ "$local_service" = "" || "$local_username" = "" || "$local_trigger" = "" ]]; then
            printf "["$red"err"$reset"]\n"
            control=false
        else
    
            printf "["$green"ok"$reset"]\n"
            control=true
            username="$local_username"
            service="$local_service"
            trigger="$local_trigger"
        fi
    fi
}

updateBaseProjects() {
    printf $magenta"Updating the index of base projects…"$reset

    #gh_bpindex_return=''

    #gh_bpindex='curl -s https://api.github.com/users/%USERNAME%/repos'
    #gh_bpindex_login='curl -s --user %USERNAME% https://api.github.com/users/%USERNAME%/repos'

    querry="${gh_bpindex//%USERNAME%/$username}"

    ret="$(eval $querry)"

    filter_name=${gh_indexcleaner//%QUERRY%/name}
    filter_desc=${gh_indexcleaner//%QUERRY%/description}
    filter_httpclone=${gh_indexcleaner//%QUERRY%/clone_url}
    filter_sshclone=${gh_indexcleaner//%QUERRY%/ssh_url}

    retnames=($(eval "echo \"\$ret\" $filter_name"))
    retdescs=($(eval "echo \"\$ret\" $filter_desc"))
    rethttpclone=($(eval "echo \"\$ret\" $filter_httpclone"))
    retsshclone=($(eval "echo \"\$ret\" $filter_sshclone"))

    #echo $retnames
    #echo $retdescs
    #echo $rethttpclone
    #echo $retsshclone

    printf '%s\n' "${retnames[@]}"
    #printf '%s\n' "${retdescs[@]}"
    printf '%s\n' "${rethttpclone[@]}"
    printf '%s\n' "${retsshclone[@]}"

    #printf "["$green"ok"$reset"]\n"
    #printf "["$red"err"$reset"]\n"

    printf "\n"
}

printUsage() {
    echo $progname" v"$version" - "$creator
    echo
    echo "Usage:"
    echo
    echo "Options:"
    echo
}

inputConfig() {
    askYn "Before going any further we nedd to ask you a few things. (No: use default values for this session only)"
    if [ "$control" = true ]; then
        control=true
        while [ "$control" = true ]; do
            selectService
            inputUsername
            inputBaseProjectTrigger

            checkConfig
        done

        echo $magenta"Writing stuff to the configuration file ($configfile)…"$reset
        writeConfig
    else
        echo $magenta"Using default configuration, for this session only."$reset
    fi
}

### Beginning of the script

# Handle command line arguments
while [ "$1" != "" ]; do
    case $1 in
        -l | --login)
            login=1;
            ;;
        -d | --default)
            default=1;
            ;;
        -u | --update )
            update=1
            ;;
        -V | --version )
            echo $version
            exit
            ;;
        -h | --help )           
            printUsage
            exit
            ;;
        * )
            echo "Wrong command line parameter."
            printUsage
            exit 1
            ;;
    esac
    shift
done

echo $progname" v"$version" - "$creator

if [ -f $configfile ]; then
    echo $green"Configuration file found."$reset
    if [ $default = 1 ]; then
        echo $magenta"Using default configuration, for this session only."$reset
    else 
        readConfig
        if [ "$control" = false ]; then
            echo $magenta"Configuration file corrupted."$reset
            inputConfig
        fi
    fi
else
    echo $magenta"No configuration file found."$reset
    inputConfig
fi

if [ $update = 1 ]; then
    updateBaseProjects
    exit
fi

#echo $service
#echo $username
#echo $trigger

