#!/bin/bash

# Name and version
progname="BaseProject"
version="0.1"
creator="Duane Bekaert"

# Default value
configfile=$(eval echo ~)"/.bprc"
service="github"
username="base_project"
trigger="base_"

# Colors
green=$(eval tput setaf 2);
black=$(eval tput setaf 0);
red=$(eval tput setaf 1);
green=$(eval tput setaf 2);
yellow=$(eval tput setaf 3);
blue=$(eval tput setaf 4);
magenta=$(eval tput setaf 5);
cyan=$(eval tput setaf 2);
white=$(eval tput setaf 7);
reset=$(eval tput sgr0);

askYn() {
    valid=false;
    while [ "$valid" = false ]; do
        printf "["$green"?"$reset"] ""$1"" (Y/n) ";
        read -r LINE || [[ -n $LINE ]];
        input=$(echo "$LINE" | tr '[:upper:]' '[:lower:]');
        case "$input" in
            y|yes|"")
                control=true;
                valid=true;
                ;;
            n|no)
                control=false;
                valid=true;
                ;;
            *)
                echo $red"Invalid input!"$reset;
                ;;
        esac
    done
}

askyN() {
    valid=false;
    while [ "$valid" = false ]; do
        printf "["$green"?"$reset"] ""$1"" (y/N) ";
        read -r LINE || [[ -n $LINE ]];
        input=$(echo "$LINE" | tr '[:upper:]' '[:lower:]');
        case "$input" in
            n|no|"")
                control=false;
                valid=true;
                ;;
            y|yes)
                control=true;
                valid=true;
                ;;
            *)
                echo $red"Invalid input!"$reset;
                ;;
        esac
    done
}

selectService() {
    echo "["$yellow">"$reset"] Select the service you use to host your base projects (default: github):"
}

inputUsername() {
    valid=false;
    while [ "$valid" = false ]; do
        printf "["$magenta"a"$reset"] Input your user name (default: ""$username""): "
        read -r LINE || [[ -n $LINE ]];
        if [ "$LINE" != "" ]; then
            case $LINE in  
                *\ * )
                    echo $red"Invalid input!"$reset;
                    ;;
                *)
                    valid=true;
                    username=$LINE;
                    ;;
            esac
        else
            #echo $red"Invalid input!"$reset;
            valid=true;
        fi
    done
}

inputBaseProjectTrigger() {
    valid=false;
    while [ "$valid" = false ]; do
        printf "["$magenta"a"$reset"] Input your base project trigger (default: ""$trigger""): "
        read -r LINE || [[ -n $LINE ]];
        if [ "$LINE" != "" ]; then
            case $LINE in  
                *\ * )
                    echo $red"Invalid input!"$reset;
                    ;;
                *)
                    valid=true;
                    trigger=$LINE;
                    ;;
            esac
        else
            valid=true;
        fi
    done
}

checkConfig() {
    case $service in
        github)
            echo "Checking the user name ("$username") against the github API..."
            control=true;
            ;;
    esac
}

writeConfig() {
    rm -rf "$configfile"
    touch "$configfile"
    echo "$service" >> $configfile
    echo "$username" >> $configfile
    echo "$trigger" >> $configfile
}

readConfig() {
    if [ -f $configfile ]; then
        echo $magenta"Reading configuration from file ("$configfile")..."$reset

        service=$(sed -n 1p $configfile)
        username=$(sed -n 2p $configfile)
        trigger=$(sed -n 3p $configfile)
    fi
}

printUsage() {
    echo $progname
}

echo $progname" v"$version" - "$creator

if [ -f $configfile ]; then
    echo $green"Config file found."$reset
    readConfig
else
    echo $magenta"No config file found."$reset
    askYn "Before going any further we nedd to ask you a few things. (No: use default values for this session only)"
    if [ "$control" = true ]; then
        control=false;
        while [ "$control" = false ]; do
            selectService
            inputUsername
            inputBaseProjectTrigger

            checkConfig
        done

        echo $magenta"Writing stuff to the configuration file ($configfile)..."$reset
        writeConfig
    else
        echo $magenta"Using default configuration, for this session only."$reset
    fi
fi

echo $service
echo $username
echo $trigger

